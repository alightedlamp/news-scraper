{"version":3,"sources":["../../src/controllers/articleController.js"],"names":["populate","all","scrapeHackerNews","scrapeReddit","then","data","articles","reduce","reducer","arr","concat","create","catch","Error","err","getAll","find","getOne","findOne","_id","id","getSaved","userId","getAllArticles","req","res","json","getArticleById","params","renderHome","next","newArticles","savedArticles","render","renderSaved","user","renderOne","article","renderAll"],"mappings":"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","file":"articleController.js","sourcesContent":["import Promise from 'promise-polyfill'\n\nimport Article from '../models/Article'\nimport SavedArticle from '../models/SavedArticle'\nimport scraper from '../util/scraper'\n\n// Article handlers\n// ////////////////////////////\n\nexport const populate = () =>\n  // eslint-disable-next-line\n  Promise.all([scraper.scrapeHackerNews(), scraper.scrapeReddit()])\n    .then((data) => {\n      const articles = data.reduce((reducer, arr) => reducer.concat(arr), [])\n      return Article.create(articles)\n    })\n    .catch(err => new Error(err))\n\nexport const getAll = () => Article.find({})\nexport const getOne = id => Article.findOne({ _id: id })\nexport const getSaved = userId => SavedArticle.find({ userId })\n\n// API route controllers\n// ////////////////////////////\n\nexport const getAllArticles = (req, res) => getAll().then(data => res.json(data))\nexport const getArticleById = (req, res) => getOne(req.params.id).then(data => res.json(data))\n\n// HTML route controllers\n// ////////////////////////////\n\nexport const renderHome = async (req, res, next) => {\n  try {\n    const newArticles = await populate()\n    const savedArticles = await getAll()\n\n    const articles = savedArticles.concat(newArticles)\n    res.render('index', {\n      articles,\n    })\n  } catch (err) {\n    next(err)\n  }\n}\n\nexport const renderSaved = (req, res, next) =>\n  getSaved(req.user.id)\n    .then(data => res.render('saved', { articles: data }))\n    .catch(err => next(err))\n\nexport const renderOne = (req, res) =>\n  getOne(req.params.id).then(data => res.render('article', { article: data }))\n\nexport const renderAll = (req, res) => getAll().then(data => res.render('all', { articles: data }))\n"]}