{"version":3,"sources":["../src/server.js"],"names":["Promise","connect","db","connection","on","console","error","bind","app","use","createStrategy","serializeUser","deserializeUser","engine","defaultLayout","layoutsDir","join","__dirname","partialsDir","set","secret","saveUninitialized","resave","cookie","maxAge","initialize","session","urlencoded","extended","json","static","require","req","res","next","err","Error","status","locals","message","get","render","listen","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA,mBAASA,OAAT,GAAmBA,OAAnB;AACA,mBAASC,OAAT;;AAEA,IAAMC,KAAK,mBAASC,UAApB;;AAEA;AACA;AACAD,GAAGE,EAAH,CAAM,OAAN,EAAeC,QAAQC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,2BAA5B,CAAf;;AAEA,IAAMG,MAAM,wBAAZ;;AAEA,mBAASC,GAAT,CAAa,eAAKC,cAAL,EAAb;AACA,mBAASC,aAAT,CAAuB,eAAKA,aAAL,EAAvB;AACA,mBAASC,eAAT,CAAyB,eAAKA,eAAL,EAAzB;;AAEAJ,IAAIK,MAAJ,CACE,YADF,EAEE,iCAAkB;AAChBC,iBAAe,MADC;AAEhBC,cAAY,eAAKC,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAFI;AAGhBC,eAAa,eAAKF,IAAL,CAAUC,SAAV,EAAqB,gBAArB;AAHG,CAAlB,CAFF;AAQAT,IAAIW,GAAJ,CAAQ,aAAR,EAAuB,YAAvB;AACAX,IAAIW,GAAJ,CAAQ,OAAR,EAAiB,eAAKH,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;;AAEAT,IAAIC,GAAJ,CAAQ,8BAAQ;AACdW,UAAQ,cADM;AAEdC,qBAAmB,KAFL;AAGdC,UAAQ,KAHM;AAIdC,UAAQ,EAAEC,QAAQ,MAAV;AAJM,CAAR,CAAR;AAMAhB,IAAIC,GAAJ,CAAQ,mBAASgB,UAAT,EAAR;AACAjB,IAAIC,GAAJ,CAAQ,mBAASiB,OAAT,EAAR;AACAlB,IAAIC,GAAJ,CAAQ,qBAAWkB,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACApB,IAAIC,GAAJ,CAAQ,qBAAWoB,IAAX,EAAR;;AAEArB,IAAIC,GAAJ,CAAQ,4BAAR;;AAEAD,IAAIC,GAAJ,CAAQ,GAAR,EAAa,kBAAQqB,MAAR,CAAe,eAAKd,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAAf,CAAb;AACAT,IAAIC,GAAJ,CAAQsB,QAAQ,UAAR,CAAR;;AAEA;AACAvB,IAAIC,GAAJ,CAAQ,UAACuB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACD,CAJD;;AAMA;AACA3B,IAAIC,GAAJ,CAAQ,UAAC0B,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/B;AACAD,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAzB;AACAN,MAAIK,MAAJ,CAAWhC,KAAX,GAAmB0B,IAAIxB,GAAJ,CAAQgC,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCL,GAAvC,GAA6C,EAAhE;;AAEA9B,UAAQC,KAAR,CAAc6B,GAAd;;AAEA;AACAF,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,MAAIQ,MAAJ,CAAW,OAAX,EAAoB;AAClBF,aAASJ,IAAII,OADK;AAElBF,YAAQF,IAAIE;AAFM,GAApB;AAID,CAbD;;AAeA;AACA7B,IAAIkC,MAAJ,eAAiB;AAAA,SAAMrC,QAAQsC,GAAR,kCAAN;AAAA,CAAjB","file":"server.js","sourcesContent":["import express from 'express'\nimport path from 'path'\nimport mongoose from 'mongoose'\nimport compression from 'compression'\nimport session from 'express-session'\nimport passport from 'passport'\nimport bodyParser from 'body-parser'\nimport expressHandlebars from 'express-handlebars'\n\nimport User from './models/User'\nimport { PORT, MONGODB_URI } from './shared/config'\n\nmongoose.Promise = Promise\nmongoose.connect(MONGODB_URI)\n\nconst db = mongoose.connection\n\n// Bind connection to error event (to get notification of connection errors)\n// eslint-disable-next-line\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'))\n\nconst app = express()\n\npassport.use(User.createStrategy())\npassport.serializeUser(User.serializeUser())\npassport.deserializeUser(User.deserializeUser())\n\napp.engine(\n  'handlebars',\n  expressHandlebars({\n    defaultLayout: 'main',\n    layoutsDir: path.join(__dirname, 'views/layouts'),\n    partialsDir: path.join(__dirname, 'views/partials'),\n  }),\n)\napp.set('view engine', 'handlebars')\napp.set('views', path.join(__dirname, 'views'))\n\napp.use(session({\n  secret: 'secret kitty',\n  saveUninitialized: false,\n  resave: false,\n  cookie: { maxAge: 604800 },\n}))\napp.use(passport.initialize())\napp.use(passport.session())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(bodyParser.json())\n\napp.use(compression())\n\napp.use('/', express.static(path.join(__dirname, '/public')))\napp.use(require('./routes'))\n\n// Catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found')\n  err.status = 404\n  next(err)\n})\n\n// Error handler\napp.use((err, req, res, next) => {\n  // Set locals, only providing error in development\n  res.locals.message = err.message\n  res.locals.error = req.app.get('env') === 'development' ? err : {}\n\n  console.error(err)\n\n  // Render the error page\n  res.status(err.status || 500)\n  res.render('error', {\n    message: err.message,\n    status: err.status,\n  })\n})\n\n// eslint-disable-next-line\napp.listen(PORT, () => console.log(`App running on ${PORT}`))\n"]}